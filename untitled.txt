Hangman Spinoff - “Guess the words, or die.”

User Manual

Guess the words, or die is a new (and exciting) version of Hangman where you play against a 2D grid of words, much like a crossword, but only guessing one letter at a time. If that letter appears in a word on the grid, you see the letter appear, but it will only show up in the one word that contains the letter, so you may need to try the same letter multiple times.
To begin the game, click the “Enough talk! Play already...” button. This will show you the game grid, and a box in which you can enter a letter or word guess. Type a letter, ‘a’ for example, and if that letter appears in the word, it will appear. But remember, you may need to use it multiple times!

But... how does it work?

A key design decision of Guess the words, or die is the near total separation of game logic and UI presentation. The former is handled, in the main, by an instance of the Board class, and the latter by an instance of the GameUI class. They communicate by exchanging GameEvents, the passing of which is handled by two StateObservables (each a public property of the Board or GameUI instances). The StateObservable classes extend the java.util.Observable class, and the Board and GameUI classes implement the Observable interfaces.

The most interesting method in the program is the placeWords method of the Board class. Its role is to find and place a specific word within the game grid. This requires trying to find a matching letter within an already placed word, find the orientation of the matched word and rotate and place the new word accordingly. If it cannot find a suitable place, the algorithm will repeatedly attempt to place the word randomly.

The Grid class (and an array of LetterBoxes) are used to display the game state to the player. Each LetterBox is given a letter, but it does not show it until it has been ‘unmasked’ by the player attempting a letter or word that matches the letter in the Letterbox. The GameUI, and subsequently Grid and LetterBoxes are notified of a change to the game state when the Board’s StateObservable emits a BOARD_CHANGE event. A new ‘mask’ grid (of boolean values) is passed along with this message so that the Grid may be updated.

Screenshots of the game in progress are found on the next page, and the code has been emailed. Further information about the working of the code can be found there.